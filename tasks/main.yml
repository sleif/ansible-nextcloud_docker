---

- name: Nextcloud | merge container env | letsencrypt
  ansible.builtin.set_fact:
    nextcloud_container_env_options: "{{ nextcloud_container_env_options | default({}) | combine(nextcloud_container_env.letsencrypt) }}"
  when: nextcloud_container_env.letsencrypt.virtual_host

# - ansible.builtin.debug:
#     msg: "{{ nextcloud_container_env.main | combine( nextcloud_container_env_options | default({}) ) }}"

# - name: Nextcloud | install default and custom apps
#   ansible.builtin.debug:
#     msg: "{{ item }}"
#   loop: "{{ [nextcloud_apps_enabled_default + nextcloud_apps_enabled_custom] | flatten | unique }}"
#   ignore_errors: true
# - pause:
- name: Additional nginx proxy configuration from nginx_vhosts_defaults
  ansible.builtin.lineinfile:
    path: "{{ nginx_storage_dir_base }}/nginx/vhost.d/{{ item.1 }}"
    create: true
    line: "{{ item.0.name }} {{ item.0.value }}"
    regexp: "^{{ item.0.name }}\ .*"
    mode: "0644"
  with_nested:
    - "{{ nginx_vhosts_defaults }}"
    - "{{ nextcloud_container_env.letsencrypt.virtual_host.split(',') }}"
  when: nextcloud_container_env.letsencrypt.virtual_host
  tags:
    - nginx_vhosts_defaults

- name: Additional nginx proxy configuration about letsencrypt
  ansible.builtin.lineinfile:
    path: "{{ nginx_storage_dir_base }}/nginx/vhost.d/{{ item.1 }}"
    create: true
    line: "{{ item.0.name }} {{ item.0.value }};"
    regexp: "^{{ item.0.name }}.*"
    mode: "0644"
  with_nested:
    - [{name: "set_real_ip_from", value: "{{ docker_network_subnet }}"}]
    - "{{ nextcloud_container_env.letsencrypt.virtual_host.split(',') }}"
  when: nextcloud_container_env.letsencrypt.virtual_host
  tags:
    - nginx_vhosts_defaults

- name: Nextcloud | update Nextcloud apps before a possible update of the container
  ansible.builtin.include_tasks:
    file: nextcloud_update_apps.yml

- name: Nextcloud-Container starten
  community.general.docker_container:
    name: nextcloud
    image: "nextcloud:{{ nextcloud_version }}"
    networks:
      - name: "{{ docker_network_name }}"
        aliases:
          - nextcloud-container
    networks_cli_compatible: true
    state: started
    restart_policy: always
    recreate: true
    # restart: true
    pull: true
    ports: "{{ nextcloud_external_ports }}"
    volumes:
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud:/var/www/html:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_config:/var/www/html/config:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_custom_apps:/var/www/html/custom_apps:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_data:/var/www/html/data:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_themes:/var/www/html/themes:Z"
    env: "{{ nextcloud_container_env.main | combine(nextcloud_container_env_options | default({})) }}"
    tmpfs:
      - /tmp
  register: _nextcloud

- name: Nextcloud | register container IP
  ansible.builtin.set_fact:
    _container_ip: "{{ _nextcloud.container.NetworkSettings.Networks[docker_network_name].IPAddress }}"

- name: Nextcloud | wait for nextcloud service comes up
  ansible.builtin.uri:
    url: "http://{{ _container_ip }}/"
    # url: "https://{{ nextcloud_container_env.letsencrypt.virtual_host.split(',')[0] }}/"
    # status_code: 200
    status_code: [200, 400]
    validate_certs: false
  register: result
  until: result is succeeded
  retries: 120
  delay: 10

- name: Nextcloud | get enabled and disabled apps
  ansible.builtin.shell:
    set -o pipefail; docker exec --user www-data nextcloud php occ app:list --shipped=false --output=json | grep "{"
  register: nextcloud_app_list_result
  changed_when: false

- name: Nextcloud | set_fact nextcloud_app_list
  ansible.builtin.set_fact:
    nextcloud_app_list: "{{ nextcloud_app_list_result.stdout | from_json }}"

- name: Nextcloud | install default and custom apps  # noqa: no-changed-when ignore-errors
  ansible.builtin.command:
    docker exec --user www-data nextcloud php occ app:install {{ item }}
  loop: "{{ [nextcloud_apps_enabled_default + nextcloud_apps_enabled_custom] | flatten | unique }}"
  when:
    - item not in nextcloud_app_list.enabled
    - item not in nextcloud_app_list.disabled
  ignore_errors: true

- name: Nextcloud | enable default and custom apps  # noqa: no-changed-when
  ansible.builtin.command:
    docker exec --user www-data nextcloud php occ app:enable {{ item }}
  loop: "{{ [nextcloud_apps_enabled_default + nextcloud_apps_enabled_custom] | flatten | unique }}"
  when: item not in nextcloud_app_list.enabled

- name: Nextcloud | remove apps not wanted  # noqa: no-changed-when
  ansible.builtin.command:
    docker exec --user www-data nextcloud php occ app:disable {{ item }}
  loop: "{{ nextcloud_apps_disabled }}"
  when: item in nextcloud_app_list.enabled

# https://www.jeffgeerling.com/blog/2017/changing-deeply-nested-dict-variable-ansible-playbook
- name: Nextcloud | merge nextcloud_config | system
  ansible.builtin.set_fact:
    nextcloud_config: "{{ nextcloud_config | default({}) | combine({'system': nextcloud_config_system.system}, recursive=true) }}"

- name: Nextcloud | merge nextcloud_config | system mail
  ansible.builtin.set_fact:
    nextcloud_config: "{{ nextcloud_config | default({}) | combine({'system': nextcloud_config_system_smtp.system}, recursive=true) }}"
  when: nextcloud_config_system_smtp.system.mail_smtphost

- name: Nextcloud | merge nextcloud_config | apps preview
  ansible.builtin.set_fact:
    nextcloud_config: "{{ nextcloud_config | default({}) | combine({'apps': {'preview': nextcloud_config_apps_preview.apps.preview}}, recursive=true) }}"

- name: Nextcloud | merge nextcloud_config | apps previewgenerator
  ansible.builtin.set_fact:
    nextcloud_config: "{{ nextcloud_config | default({}) |
                      combine({'apps': {'previewgenerator': nextcloud_config_apps_previewgenerator.apps.previewgenerator}}, recursive=true) }}"

- name: Nextcloud | merge nextcloud_config | apps user_ldap
  ansible.builtin.set_fact:
    nextcloud_config: "{{ nextcloud_config | default({}) |
                       combine({'apps': {'user_ldap': nextcloud_config_apps_user_ldap.apps.user_ldap}}, recursive=true) }}"
  when: nextcloud_config_apps_user_ldap.apps.user_ldap.s01ldap_base

- name: Nextcloud | write temporary config file /var/www/html/config/nextcloud_config_file_for_import
  ansible.builtin.copy:
    content: "{{ nextcloud_config | to_nice_json(indent=2) }}"
    dest: "{{ container_storage_dir_base }}/nextcloud/nextcloud_config/nextcloud_config_file_for_import"
    owner: "root"
    mode: 0o444
    setype: "container_file_t"
  changed_when: false

- name: Nextcloud | apply temporary config file /var/www/html/config/nextcloud_config_file_for_import
  ansible.builtin.command:
    docker exec --user www-data nextcloud php occ config:import /var/www/html/config/nextcloud_config_file_for_import
  register: result
  changed_when: result is success

- name: Nextcloud | remove temporary config file /var/www/html/config/nextcloud_config_file_for_import
  ansible.builtin.file:
    path: /var/www/html/config/nextcloud_config_file_for_import
    state: absent

- name: Add Nextcloud cronjob
  ansible.builtin.cron:
    name: Nextcloud cronjob
    minute: "*/5"
    job: "docker exec --user www-data nextcloud php /var/www/html/cron.php"
  tags:
    - cronjob

- name: Print information how to tune Nextcloud Database
  ansible.builtin.debug:
    msg:
      - "on host {{ ansible_host }} run the following command as root user"
      - "docker exec --user www-data nextcloud php occ db:convert-filecache-bigint --no-interaction"
